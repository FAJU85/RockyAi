name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: rocky-ai

jobs:
  # Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r apps/api/requirements.txt
        pip install -r apps/api/requirements-test.txt
    
    - name: Install Node.js dependencies
      run: |
        cd apps/ui
        npm ci
    
    - name: Run Python linting
      run: |
        pip install flake8 black isort mypy
        flake8 apps/api --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check apps/api
        isort --check-only apps/api
        mypy apps/api --ignore-missing-imports
    
    - name: Run Node.js linting
      run: |
        cd apps/ui
        npm run lint
        npm run type-check
    
    - name: Run security scan
      run: |
        pip install safety bandit
        safety check -r apps/api/requirements.txt
        bandit -r apps/api -f json -o bandit-report.json
        bandit -r apps/api -f txt
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rockyai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r apps/api/requirements.txt
        pip install -r apps/api/requirements-test.txt
    
    - name: Install Node.js dependencies
      run: |
        cd apps/ui
        npm ci
    
    - name: Run database migrations
      run: |
        cd apps/api
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rockyai
    
    - name: Run Python tests
      run: |
        cd apps/api
        pytest tests/ -v --cov=apps --cov-report=xml --cov-report=html --junitxml=test-results.xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rockyai
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        SECURITY_ALLOWED_ORIGINS: '["http://localhost:3000"]'
    
    - name: Run Node.js tests
      run: |
        cd apps/ui
        npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          apps/api/test-results.xml
          apps/api/htmlcov/
          apps/api/coverage.xml
          apps/ui/coverage/

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_rockyai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r apps/api/requirements.txt
        pip install -r apps/api/requirements-test.txt
    
    - name: Run performance tests
      run: |
        cd apps/api
        pytest tests/performance/ -v --benchmark-skip --junitxml=performance-results.xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_rockyai
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        SECURITY_ALLOWED_ORIGINS: '["http://localhost:3000"]'
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: apps/api/performance-results.xml

  # Build and Push Docker Images
  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [api, ui, dmr]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: helm upgrade --install rocky-ai-staging ./helm/rocky-ai --values ./helm/rocky-ai/values-staging.yaml
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests here
        # Example: curl -f https://staging.rockyai.com/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: helm upgrade --install rocky-ai-prod ./helm/rocky-ai --values ./helm/rocky-ai/values-production.yaml
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against production..."
        # Add smoke tests here
        # Example: curl -f https://rockyai.com/health
    
    - name: Notify deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic here (Slack, email, etc.)

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk security scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/api:latest
        args: --severity-threshold=high

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, deploy-staging, deploy-production]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "CI/CD pipeline failed!"
        # Add notification logic here (Slack, email, etc.)
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD pipeline failed!"}' ${{ secrets.SLACK_WEBHOOK_URL }}
