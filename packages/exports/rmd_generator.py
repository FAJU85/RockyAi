"""
R Markdown Export Generator for Rocky AI
Creates reproducible R Markdown documents with embedded code and outputs
"""
import os
import tempfile
import subprocess
from typing import Dict, List, Any, Optional
from datetime import datetime
import json


class RMarkdownGenerator:
    """Generate R Markdown documents from analysis results"""
    
    def __init__(self, output_dir: str = "exports"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
    
    def generate_rmd(self, 
                    analysis_result: Dict[str, Any],
                    title: str = "Rocky AI Analysis",
                    author: str = "Rocky AI",
                    date: Optional[str] = None) -> str:
        """Generate R Markdown document from analysis result"""
        
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        # Extract analysis details
        query = analysis_result.get('query', 'Analysis')
        plan = analysis_result.get('plan', {})
        code = analysis_result.get('code', '')
        output = analysis_result.get('output', '')
        error = analysis_result.get('error', '')
        language = plan.get('language', 'python')
        analysis_type = plan.get('analysis_type', 'analysis')
        
        # Generate R Markdown content
        rmd_content = self._create_rmd_template(
            title=title,
            author=author,
            date=date,
            query=query,
            plan=plan,
            code=code,
            output=output,
            error=error,
            language=language,
            analysis_type=analysis_type
        )
        
        # Save R Markdown file
        filename = f"rocky_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.Rmd"
        filepath = os.path.join(self.output_dir, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(rmd_content)
        
        return filepath
    
    def _create_rmd_template(self, 
                           title: str,
                           author: str,
                           date: str,
                           query: str,
                           plan: Dict[str, Any],
                           code: str,
                           output: str,
                           error: str,
                           language: str,
                           analysis_type: str) -> str:
        """Create R Markdown template with analysis content"""
        
        # YAML header
        yaml_header = f"""---
title: "{title}"
author: "{author}"
date: "{date}"
output:
  html_document:
    toc: true
    toc_float: true
    code_folding: show
    theme: flatly
    highlight: tango
    df_print: paged
  pdf_document:
    toc: true
    number_sections: true
    latex_engine: xelatex
  word_document:
    toc: true
    reference_docx: default
---

"""
        
        # Introduction section
        introduction = f"""# Introduction

This document presents the results of a {analysis_type} analysis generated by Rocky AI.

**Research Question:** {query}

**Analysis Type:** {analysis_type.title()}

**Language:** {language.upper()}

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

---

"""
        
        # Analysis plan section
        plan_section = self._create_plan_section(plan)
        
        # Code section
        code_section = self._create_code_section(code, language)
        
        # Results section
        results_section = self._create_results_section(output, error)
        
        # Conclusion section
        conclusion = self._create_conclusion_section(analysis_type, error)
        
        # Combine all sections
        full_content = (
            yaml_header +
            introduction +
            plan_section +
            code_section +
            results_section +
            conclusion
        )
        
        return full_content
    
    def _create_plan_section(self, plan: Dict[str, Any]) -> str:
        """Create analysis plan section"""
        
        if not plan:
            return ""
        
        steps = plan.get('steps', [])
        libraries = plan.get('libraries', [])
        
        plan_section = """# Analysis Plan

## Overview

The following analysis plan was automatically generated based on the research question:

"""
        
        if steps:
            plan_section += "## Analysis Steps\n\n"
            for i, step in enumerate(steps, 1):
                plan_section += f"{i}. {step}\n"
            plan_section += "\n"
        
        if libraries:
            plan_section += "## Required Libraries\n\n"
            plan_section += "The following libraries are required for this analysis:\n\n"
            for lib in libraries:
                plan_section += f"- `{lib}`\n"
            plan_section += "\n"
        
        plan_section += "---\n\n"
        return plan_section
    
    def _create_code_section(self, code: str, language: str) -> str:
        """Create code section with syntax highlighting"""
        
        if not code:
            return ""
        
        # Determine code chunk language
        chunk_lang = language.lower()
        if chunk_lang == 'python':
            chunk_lang = 'python'
        elif chunk_lang == 'r':
            chunk_lang = 'r'
        else:
            chunk_lang = 'text'
        
        code_section = f"""# Code Implementation

## Generated Code

The following code was automatically generated to perform the analysis:

```{{{chunk_lang}}}
{code}
```

## Code Explanation

This code implements the analysis plan described above. Key features:

- **Data Loading**: Reads the dataset and performs initial data exploration
- **Data Validation**: Checks data quality and assumptions
- **Statistical Analysis**: Performs the requested statistical tests
- **Visualization**: Creates appropriate plots and charts
- **Results Interpretation**: Provides statistical interpretation and conclusions

---

"""
        return code_section
    
    def _create_results_section(self, output: str, error: str) -> str:
        """Create results section"""
        
        results_section = """# Results

## Analysis Output

"""
        
        if error:
            results_section += f"""### Error

The analysis encountered an error:

```
{error}
```

Please check the data format and requirements.

"""
        elif output:
            results_section += f"""### Statistical Results

```
{output}
```

### Interpretation

The results above show the statistical analysis output. Key findings:

- **Statistical Significance**: Review p-values and confidence intervals
- **Effect Sizes**: Consider practical significance beyond statistical significance
- **Assumptions**: Verify that statistical assumptions are met
- **Limitations**: Consider any limitations of the analysis

"""
        else:
            results_section += """### No Results Available

The analysis did not produce output. This may be due to:

- Data format issues
- Missing required variables
- Insufficient data for analysis
- Code execution errors

Please review the code and data requirements.

"""
        
        results_section += "---\n\n"
        return results_section
    
    def _create_conclusion_section(self, analysis_type: str, error: str) -> str:
        """Create conclusion section"""
        
        conclusion = """# Conclusion

## Summary

"""
        
        if error:
            conclusion += f"""This {analysis_type} analysis encountered technical difficulties and could not be completed successfully. The error message above provides details about what went wrong.

**Recommendations:**
1. Check data format and completeness
2. Verify variable names and types
3. Ensure sufficient sample size
4. Review statistical assumptions

"""
        else:
            conclusion += f"""This {analysis_type} analysis was successfully completed using Rocky AI. The results provide insights into the research question and can be used to inform decision-making.

**Key Takeaways:**
1. The analysis was performed using best practices
2. All code is reproducible and transparent
3. Results should be interpreted in context
4. Consider additional analyses as needed

**Next Steps:**
1. Review results with domain experts
2. Consider additional analyses
3. Document findings in research reports
4. Share reproducible code with collaborators

"""
        
        conclusion += f"""
## Reproducibility

This analysis was generated by Rocky AI on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}. All code is provided above and can be run independently to reproduce the results.

**System Information:**
- Rocky AI Version: 0.1.0
- Analysis Type: {analysis_type}
- Generated: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- Reproducible: Yes

---

*This document was automatically generated by Rocky AI - The AI Research Assistant*
"""
        
        return conclusion
    
    def render_to_html(self, rmd_file: str) -> str:
        """Render R Markdown to HTML"""
        try:
            # Use R to render the document
            r_script = f"""
            library(rmarkdown)
            render('{rmd_file}', output_format = 'html_document')
            """
            
            # Write R script to temporary file
            with tempfile.NamedTemporaryFile(mode='w', suffix='.R', delete=False) as f:
                f.write(r_script)
                temp_r_file = f.name
            
            # Run R script
            result = subprocess.run(['Rscript', temp_r_file], 
                                  capture_output=True, text=True, timeout=300)
            
            # Clean up
            os.unlink(temp_r_file)
            
            if result.returncode == 0:
                # HTML file should be created with same name but .html extension
                html_file = rmd_file.replace('.Rmd', '.html')
                return html_file
            else:
                raise Exception(f"R rendering failed: {result.stderr}")
                
        except Exception as e:
            raise Exception(f"Failed to render HTML: {e}")
    
    def render_to_pdf(self, rmd_file: str) -> str:
        """Render R Markdown to PDF"""
        try:
            # Use R to render the document
            r_script = f"""
            library(rmarkdown)
            render('{rmd_file}', output_format = 'pdf_document')
            """
            
            # Write R script to temporary file
            with tempfile.NamedTemporaryFile(mode='w', suffix='.R', delete=False) as f:
                f.write(r_script)
                temp_r_file = f.name
            
            # Run R script
            result = subprocess.run(['Rscript', temp_r_file], 
                                  capture_output=True, text=True, timeout=300)
            
            # Clean up
            os.unlink(temp_r_file)
            
            if result.returncode == 0:
                # PDF file should be created with same name but .pdf extension
                pdf_file = rmd_file.replace('.Rmd', '.pdf')
                return pdf_file
            else:
                raise Exception(f"R rendering failed: {result.stderr}")
                
        except Exception as e:
            raise Exception(f"Failed to render PDF: {e}")
    
    def export_analysis(self, 
                       analysis_result: Dict[str, Any],
                       formats: List[str] = ['rmd', 'html'],
                       title: str = "Rocky AI Analysis") -> Dict[str, str]:
        """Export analysis in multiple formats"""
        
        results = {}
        
        # Generate R Markdown
        rmd_file = self.generate_rmd(analysis_result, title=title)
        results['rmd'] = rmd_file
        
        # Render to other formats
        for format_type in formats:
            if format_type == 'html':
                try:
                    html_file = self.render_to_html(rmd_file)
                    results['html'] = html_file
                except Exception as e:
                    print(f"Failed to generate HTML: {e}")
            
            elif format_type == 'pdf':
                try:
                    pdf_file = self.render_to_pdf(rmd_file)
                    results['pdf'] = pdf_file
                except Exception as e:
                    print(f"Failed to generate PDF: {e}")
        
        return results


# Example usage
if __name__ == "__main__":
    # Sample analysis result
    sample_result = {
        'query': 'Perform a t-test to compare groups A and B',
        'plan': {
            'analysis_type': 't_test',
            'language': 'r',
            'steps': ['Load data', 'Check assumptions', 'Perform t-test', 'Interpret results'],
            'libraries': ['tidyverse', 'broom']
        },
        'code': '''
# Load required libraries
library(tidyverse)
library(broom)

# Load data
df <- read_csv("data.csv")

# Perform t-test
t_test <- t.test(value ~ group, data = df)
print(t_test)
        ''',
        'output': 't = 2.34, p-value = 0.023',
        'status': 'executed'
    }
    
    # Generate export
    generator = RMarkdownGenerator()
    files = generator.export_analysis(sample_result, formats=['rmd', 'html'])
    
    print("Generated files:")
    for format_type, filepath in files.items():
        print(f"{format_type}: {filepath}")
